// <auto-generated />
using System;
using F1RestAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace F1RestAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("F1RestAPI.Models.Constructor", b =>
                {
                    b.Property<int>("ConstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConstructorId"));

                    b.Property<string>("ConstructorRef")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ConstructorId");

                    b.ToTable("Constructors");
                });

            modelBuilder.Entity("F1RestAPI.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DriverId"));

                    b.Property<int>("DNF")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DriverCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("DriverForename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DriverNumber")
                        .HasColumnType("integer");

                    b.Property<string>("DriverRef")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DriverSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Podiumns")
                        .HasColumnType("integer");

                    b.Property<int>("PolePositions")
                        .HasColumnType("integer");

                    b.Property<string>("WikipediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("DriverId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("F1RestAPI.Models.DriverConstructor", b =>
                {
                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("ConstructorId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("DriverId", "ConstructorId", "Year");

                    b.HasIndex("ConstructorId");

                    b.ToTable("DriverConstructors");
                });

            modelBuilder.Entity("F1RestAPI.Models.IpConnectionCount", b =>
                {
                    b.Property<string>("Ip")
                        .HasColumnType("text");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.HasKey("Ip");

                    b.ToTable("IpConnectionCounts");
                });

            modelBuilder.Entity("F1RestAPI.Models.IpCountryState", b =>
                {
                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.HasKey("Country", "City");

                    b.ToTable("IpCountryStates");
                });

            modelBuilder.Entity("F1RestAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("F1RestAPI.Models.DriverConstructor", b =>
                {
                    b.HasOne("F1RestAPI.Models.Constructor", "Constructor")
                        .WithMany("DriverConstructors")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("F1RestAPI.Models.Driver", "Driver")
                        .WithMany("DriverConstructors")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Constructor");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("F1RestAPI.Models.Constructor", b =>
                {
                    b.Navigation("DriverConstructors");
                });

            modelBuilder.Entity("F1RestAPI.Models.Driver", b =>
                {
                    b.Navigation("DriverConstructors");
                });
#pragma warning restore 612, 618
        }
    }
}
